Algunos comandos que pueden ayudar cuando colaboren con proyectos muy grandes de github:

git log --oneline - Te muestra el id commit y el título del commit.
git log --decorate- Te muestra donde se encuentra el head point en el log.
git log --stat - Explica el número de líneas que se cambiaron brevemente.
git log -p- Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.
git shortlog - Indica que commits ha realizado un usuario, mostrando el usuario y el titulo de sus commits.
git log --graph --oneline --decorate y
git log --pretty=format:"%cn hizo un commit %h el dia %cd" - Muestra mensajes personalizados de los commits.
git log -3 - Limitamos el número de commits.
git log --after=“2018-1-2” ,
git log --after=“today” y
git log --after=“2018-1-2” --before=“today” - Commits para localizar por fechas.
git log --author=“Name Author” - Commits realizados por autor que cumplan exactamente con el nombre.
git log --grep=“INVIE” - Busca los commits que cumplan tal cual está escrito entre las comillas.
git log --grep=“INVIE” –i- Busca los commits que cumplan sin importar mayúsculas o minúsculas.
git log – index.html- Busca los commits en un archivo en específico.
git log -S “Por contenido”- Buscar los commits con el contenido dentro del archivo.
git log > log.txt - guardar los logs en un archivo txt
git push subir
git fetch de la master a repositorio local
git merge unir ramas
git pull copio repositorio local y bd
git am - es add y comenta a la vez, solo funciona si al archivo se le ha hecho add anteriormente.

[8/3 9:33] Lizeth Batista Vargas
    ummmda si
​[19/3 17:36] Lizeth Batista Vargas
    
 
   kkk
  
 
[20210319_171341 imagen anterior.mp4] (https://thomasgreg365-my.sharepoint.com/personal/lizeth_batista_thomasgreg_com/Documents/Microsoft%20Teams%20Chat%20Files/20210319_171341%20imagen%20anterior.mp4)[20210319_171444 mensaje de documento digitalizado.mp4] (https://thomasgreg365-my.sharepoint.com/personal/lizeth_batista_thomasgreg_com/Documents/Microsoft%20Teams%20Chat%20Files/20210319_171444%20mensaje%20de%20documento%20digitalizado.mp4)[20210319_171551 remitir imágenes fuera de línea.mp4] (https://thomasgreg365-my.sharepoint.com/personal/lizeth_batista_thomasgreg_com/Documents/Microsoft%20Teams%20Chat%20Files/20210319_171551%20remitir%20im%C3%A1genes%20fuera%20de%20l%C3%ADnea.mp4)[20210319_172013 botón transmitir.mp4] (https://thomasgreg365-my.sharepoint.com/personal/lizeth_batista_thomasgreg_com/Documents/Microsoft%20Teams%20Chat%20Files/20210319_172013%20bot%C3%B3n%20transmitir.mp4)[actas de inicio y de cierre.mp4] (https://thomasgreg365-my.sharepoint.com/personal/lizeth_batista_thomasgreg_com/Documents/Microsoft%20Teams%20Chat%20Files/actas%20de%20inicio%20y%20de%20cierre.mp4)​[19/3 17:37] Lizeth Batista Vargas
    No le pares bola eso
​[19/3 17:37] Olaris Medina Polo
    Que es eso
​[19/3 17:37] Olaris Medina Polo
    Bueno
​[19/3 17:58] Lizeth Batista Vargas
    
[20210318_193327.mp4] (https://thomasgreg365-my.sharepoint.com/personal/lizeth_batista_thomasgreg_com/Documents/Microsoft%20Teams%20Chat%20Files/20210318_193327.mp4)​[19/3 18:01] Lizeth Batista Vargas
    
[20210319_102305.mp4] (https://thomasgreg365-my.sharepoint.com/personal/lizeth_batista_thomasgreg_com/Documents/Microsoft%20Teams%20Chat%20Files/20210319_102305.mp4)​[martes 9:17] Lizeth Batista Vargas
    
[20210323_091431.mp4] (https://thomasgreg365-my.sharepoint.com/personal/lizeth_batista_thomasgreg_com/Documents/Microsoft%20Teams%20Chat%20Files/20210323_091431.mp4)​[martes 9:27] Lizeth Batista Vargas
    
[20210323_092618.mp4] (https://thomasgreg365-my.sharepoint.com/personal/lizeth_batista_thomasgreg_com/Documents/Microsoft%20Teams%20Chat%20Files/20210323_092618.mp4)​[0:27] Olaris Medina Polo
    Texto: @juandc
Git reset y git rm son comandos con utilidades muy diferentes, pero aún así se confunden muy fácilmente.
git rm
Este comando nos ayuda a eliminar archivos de Git sin eliminar su historial del sistema de versiones. Esto quiere decir que si necesitamos recuperar el archivo solo debemos “viajar en el tiempo” y recuperar el último commit antes de borrar el archivo en cuestión.
Recuerda que
git rm
no puede usarse así nomás. Debemos usar uno de los flags para indicarle a Git cómo eliminar los archivos que ya no necesitamos en la última versión del proyecto:
git rm --cached
: Elimina los archivos del área de Staging y del próximo commit pero los mantiene en nuestro disco duro.
git rm --force
: Elimina los archivos de Git y del disco duro. Git siempre guarda todo, por lo que podemos acceder al registro de la existencia de los archivos, de modo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).
git reset
Este comando nos ayuda a volver en el tiempo. Pero no como
git checkout
que nos deja ir, mirar, pasear y volver. Con
git reset
volvemos al pasado sin la posibilidad de volver al futuro. Borramos la historia y la debemos sobreescribir. No hay vuelta atrás.
Este comando es muy peligroso y debemos usarlo solo en caso de emergencia. Recuerda que debemos usar alguna de estas dos opciones:
Hay dos formas de usar
git reset
: con el argumento
--hard
, borrando toda la información que tengamos en el área de staging (y perdiendo todo para siempre). O, un poco más seguro, con el argumento
--soft
, que mantiene allí los archivos del área de staging para que podamos aplicar nuestros últimos cambios pero desde un commit anterior.
git reset --soft
: Borramos todo el historial y los registros de Git pero guardamos los cambios que tengamos en Staging, así podemos aplicar las últimas actualizaciones a un nuevo commit.
git reset --hard
: Borra todo. Todo todito, absolutamente todo. Toda la información de los commits y del área de staging se borra del historial.
¡Pero todavía falta algo!
git reset HEAD
: Este es el comando para sacar archivos del área de Staging. No para borrarlos ni nada de eso, solo para que los últimos cambios de estos archivos no se envíen al último commit, a menos que cambiemos de opinión y los incluyamos de nuevo en staging con
git add
, por supuesto.
¿Por qué esto es importante?
Imagina el siguiente caso:
Hacemos cambios en los archivos de un proyecto para una nueva actualización. Todos los archivos con cambios se mueven al área de staging con el comando
git add
. Pero te das cuenta de que uno de esos archivos no está listo todavía. Actualizaste el archivo pero ese cambio no debe ir en el próximo commit por ahora.
¿Qué podemos hacer?
Bueno, todos los cambios están en el área de Staging, incluido el archivo con los cambios que no están listos. Esto significa que debemos sacar ese archivo de Staging para poder hacer commit de todos los demás.
¡Al usar
git rm
lo que haremos será eliminar este archivo completamente de git! Todavía tendremos el historial de cambios de este archivo, con la eliminación del archivo como su última actualización. Recuerda que en este caso no buscábamos eliminar un archivo, solo dejarlo como estaba y actualizarlo después, no en este commit.
En cambio, si usamos
git reset HEAD
, lo único que haremos será mover estos cambios de Staging a Unstaged. Seguiremos teniendo los últimos cambios del archivo, el repositorio mantendrá el archivo (no con sus últimos cambios pero sí con los últimos en los que hicimos commit) y no habremos perdido nada.
Conclusión: Lo mejor que puedes hacer para salvar tu puesto y evitar un incendio en tu trabajo es conocer muy bien la diferencia y los riesgos de todos los comandos de Git.
